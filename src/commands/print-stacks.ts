import { Command } from 'commander';
import { ConsoleUtil } from '../util/console-util';
import { OrgFormationError } from '../org-formation-error';
import { BaseCliCommand, ICommandArgs } from './base-command';
import { TemplateRoot } from '~parser/parser';
import { CloudFormationBinder } from '~cfn-binder/cfn-binder';
import { GlobalState } from '~util/global-state';

const commandName = 'print-stacks <templateFile>';
const commandDescription = 'outputs cloudformation templates generated by org-formation to the console';

export class PrintStacksCommand extends BaseCliCommand<IPrintStacksCommandArgs> {

    constructor(command: Command) {
        super(command, commandName, commandDescription, 'templateFile');
    }

    public addOptions(command: Command): void {
        command.option('--parameters [parameters]', 'parameter values passed to CloudFormation when executing stacks');
        command.option('--stack-name <stack-name>', 'name of the stack that will be used in CloudFormation', 'print');
        super.addOptions(command);
    }

    public async performCommand(command: IPrintStacksCommandArgs): Promise<void> {
        if (!command.stackName) {
            throw new OrgFormationError('argument --stack-name is missing');
        }
        const templateFile = command.templateFile;
        const template = TemplateRoot.create(templateFile);
        const state = await this.getState(command);
        GlobalState.Init(state, template);

        const cfnBinder = new CloudFormationBinder(command.stackName, template, state);

        const bindings = cfnBinder.enumBindings();
        for (const binding of bindings) {
            if (binding.action === 'Delete') {
                ConsoleUtil.LogInfo(`stack ${command.stackName} for account ${binding.accountId} and region ${binding.region} will be deleted`);
                continue;
            }
            ConsoleUtil.Out(`template for account ${binding.accountId} and region ${binding.region}`);
            const templateBody = binding.template.createTemplateBody();
            ConsoleUtil.Out(templateBody);
        }
    }
}

export interface IPrintStacksCommandArgs extends ICommandArgs {
    templateFile: string;
    stackName: string;
}
